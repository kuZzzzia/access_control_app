// Package specs provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package specs

import (
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// Изображение на загрузку.
type CreateImagePayload struct {
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	Img          *string    `json:"img,omitempty"`
	PeopleNumber *int       `json:"people_number,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    int     `json:"code"`
	Details *string `json:"details,omitempty"`
	Message string  `json:"message"`
}

// GetImageInfoResponse defines model for GetImageInfoResponse.
type GetImageInfoResponse struct {
	CreatedAt time.Time `json:"created_at"`

	// Уникальный идентификатор изображения.
	Id           string `json:"id"`
	PeopleNumber int    `json:"people_number"`
}

// Ответ на запрос получения изображения.
type GetImageResponse struct {
	Img  *string               `json:"img,omitempty"`
	Info *GetImageInfoResponse `json:"info,omitempty"`
}

// Ответ на запрос на получение списка информации об изображениях.
type ListObjectsInfoResponse struct {
	Data []GetImageInfoResponse `json:"data"`
}

// DeleteOldImagesParams defines parameters for DeleteOldImages.
type DeleteOldImagesParams struct {
	// Дата создания, до которой нужно удалить изображения.
	CreatedAt time.Time `json:"created_at"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение последнего изображения.
	// (GET /image)
	GetLastImage(w http.ResponseWriter, r *http.Request)
	// Создание изображения.
	// (POST /image)
	CreateImage(w http.ResponseWriter, r *http.Request)
	// Удаление изображения.
	// (DELETE /image/{imageId})
	DeleteImage(w http.ResponseWriter, r *http.Request, imageId string)
	// Получение изображения.
	// (GET /image/{imageId})
	GetImage(w http.ResponseWriter, r *http.Request, imageId string)
	// Получение данных по изображению.
	// (GET /image/{imageId}/info)
	GetImageInfo(w http.ResponseWriter, r *http.Request, imageId string)
	// Удаление изображений старше определенной даты.
	// (DELETE /images)
	DeleteOldImages(w http.ResponseWriter, r *http.Request, params DeleteOldImagesParams)
	// Получение списка информации об изображениях.
	// (GET /images/info)
	ListObjectInfo(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetLastImage operation middleware
func (siw *ServerInterfaceWrapper) GetLastImage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLastImage(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateImage operation middleware
func (siw *ServerInterfaceWrapper) CreateImage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateImage(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteImage operation middleware
func (siw *ServerInterfaceWrapper) DeleteImage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "imageId" -------------
	var imageId string

	err = runtime.BindStyledParameter("simple", false, "imageId", chi.URLParam(r, "imageId"), &imageId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "imageId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteImage(w, r, imageId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetImage operation middleware
func (siw *ServerInterfaceWrapper) GetImage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "imageId" -------------
	var imageId string

	err = runtime.BindStyledParameter("simple", false, "imageId", chi.URLParam(r, "imageId"), &imageId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "imageId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetImage(w, r, imageId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetImageInfo operation middleware
func (siw *ServerInterfaceWrapper) GetImageInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "imageId" -------------
	var imageId string

	err = runtime.BindStyledParameter("simple", false, "imageId", chi.URLParam(r, "imageId"), &imageId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "imageId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetImageInfo(w, r, imageId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteOldImages operation middleware
func (siw *ServerInterfaceWrapper) DeleteOldImages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteOldImagesParams

	// ------------- Required query parameter "created_at" -------------
	if paramValue := r.URL.Query().Get("created_at"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "created_at"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "created_at", r.URL.Query(), &params.CreatedAt)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "created_at", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteOldImages(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ListObjectInfo operation middleware
func (siw *ServerInterfaceWrapper) ListObjectInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListObjectInfo(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/image", wrapper.GetLastImage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/image", wrapper.CreateImage)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/image/{imageId}", wrapper.DeleteImage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/image/{imageId}", wrapper.GetImage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/image/{imageId}/info", wrapper.GetImageInfo)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/images", wrapper.DeleteOldImages)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/images/info", wrapper.ListObjectInfo)
	})

	return r
}
